import tkinter as tk
from tkinter import messagebox

class PasswordManagerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Encrypted Password Manager")
        self.root.geometry("450x300")
        
        # Initialize all screens in the same window but hidden
        self.login_screen()
        self.dashboard_screen()
        self.add_entry_screen()
        self.generate_password_screen()

        # Show login screen at start
        self.show_screen("login")

    def hide_all(self):
        for widget in self.root.winfo_children():
            widget.pack_forget()

    def show_screen(self, screen_name):
        self.hide_all()
        if screen_name == "login":
            self.login_frame.pack(fill="both", expand=1)
        elif screen_name == "dashboard":
            self.dashboard_frame.pack(fill="both", expand=1)
        elif screen_name == "add_entry":
            self.add_entry_frame.pack(fill="both", expand=1)
        elif screen_name == "generate_password":
            self.generate_password_frame.pack(fill="both", expand=1)

    # Login Screen
    def login_screen(self):
        self.login_frame = tk.Frame(self.root)
        tk.Label(self.login_frame, text="Enter Master Password", font=("Arial", 14)).pack(pady=20)
        self.entry_password = tk.Entry(self.login_frame, show="*", width=30)
        self.entry_password.pack(pady=10)
        tk.Button(self.login_frame, text="Login", command=self.check_login, cursor='star').pack(pady=10)

    def check_login(self):
        if self.entry_password.get() == "bekkar":  # Sample master password
            self.show_screen("dashboard")
        else:
            messagebox.showerror("Error", "Incorrect Master Password")

    # Dashboard Screen (UI02)
    def dashboard_screen(self):
        self.dashboard_frame = tk.Frame(self.root)
        tk.Label(self.dashboard_frame, text="Dashboard", font=("Arial", 14)).pack(pady=20)
        tk.Button(self.dashboard_frame, text="View/Edit/Delete Entries", width=30).pack(pady=5)
        tk.Button(self.dashboard_frame, text="Add New Entry", width=30, command=lambda: self.show_screen("add_entry")).pack(pady=5)
        tk.Button(self.dashboard_frame, text="Generate Password", width=30, command=lambda: self.show_screen("generate_password")).pack(pady=5)
        tk.Button(self.dashboard_frame, text="Logout", width=30, command=lambda: self.show_screen("login")).pack(pady=20)

    # Add New Entry Screen (UI04)
    def add_entry_screen(self):
        self.add_entry_frame = tk.Frame(self.root)
        tk.Label(self.add_entry_frame, text="Add New Entry", font=("Arial", 14)).pack(pady=10)
        tk.Label(self.add_entry_frame, text="Site Name:").pack()
        self.site_entry = tk.Entry(self.add_entry_frame, width=40)
        self.site_entry.pack()
        tk.Label(self.add_entry_frame, text="Username:").pack()
        self.username_entry = tk.Entry(self.add_entry_frame, width=40)
        self.username_entry.pack()
        tk.Label(self.add_entry_frame, text="Password:").pack()
        self.password_entry = tk.Entry(self.add_entry_frame, width=40)
        self.password_entry.pack()
        tk.Button(self.add_entry_frame, text="Generate Password", command=self.generate_password_for_add).pack(pady=5)
        tk.Button(self.add_entry_frame, text="Save Entry", command=self.save_entry).pack(pady=10)
        tk.Button(self.add_entry_frame, text="Back to Dashboard", command=lambda: self.show_screen("dashboard")).pack()

    def generate_password_for_add(self):
        import random, string
        length = 12
        chars = string.ascii_letters + string.digits + string.punctuation
        new_pass = ''.join(random.choices(chars, k=length))
        self.password_entry.delete(0, tk.END)
        self.password_entry.insert(0, new_pass)

    def save_entry(self):
        site = self.site_entry.get()
        username = self.username_entry.get()
        password = self.password_entry.get()
        if not site or not username or not password:
            messagebox.showwarning("Warning", "Please fill all fields!")
            return
        # Here you can save encrypted data to the database
        messagebox.showinfo("Saved", f"Entry saved:\nSite: {site}\nUsername: {username}")
        self.site_entry.delete(0, tk.END)
        self.username_entry.delete(0, tk.END)
        self.password_entry.delete(0, tk.END)

    # Password Generator Screen (UI05)
    def generate_password_screen(self):
        self.generate_password_frame = tk.Frame(self.root)
        tk.Label(self.generate_password_frame, text="Generate a Strong Password", font=("Arial", 14)).pack(pady=20)
        self.generated_pass_entry = tk.Entry(self.generate_password_frame, width=40)
        self.generated_pass_entry.pack(pady=5)
        tk.Button(self.generate_password_frame, text="Generate Password", command=self.generate_password_only).pack(pady=10)
        tk.Button(self.generate_password_frame, text="Back to Dashboard", command=lambda: self.show_screen("dashboard")).pack()

    def generate_password_only(self):
        import random, string
        length = 16
        chars = string.ascii_letters + string.digits + string.punctuation
        new_pass = ''.join(random.choices(chars, k=length))
        self.generated_pass_entry.delete(0, tk.END)
        self.generated_pass_entry.insert(0, new_pass)

# Run the application
if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordManagerApp(root)
    root.mainloop()

